Extensions can generate constraints.

# Basic feature

mdx extension version 0.5 will generate a mdx dependency:

  $ gen_project () {
  > cat > dune-project << EOF
  > (lang dune 3.17)
  > (using mdx $1)
  > (generate_opam_files)
  > (package
  >  (name n)
  >  (allow_empty))
  > EOF
  > }

  $ gen_project 0.5

  $ dune build

  $ cat n.opam
  # This file is generated by dune, edit dune-project instead
  opam-version: "2.0"
  depends: [
    "mdx" {>= "1.6.0"}
    "dune" {>= "3.17"}
    "odoc" {with-doc}
  ]
  build: [
    ["dune" "subst"] {dev}
    [
      "dune"
      "build"
      "-p"
      name
      "-j"
      jobs
      "@install"
      "@runtest" {with-test}
      "@doc" {with-doc}
    ]
  ]

# Versioning

When using an older version of the extension, even with a new lang dune version, the constraint is not generated.

  $ gen_project 0.4

  $ dune build

  $ cat n.opam
  # This file is generated by dune, edit dune-project instead
  opam-version: "2.0"
  depends: [
    "dune" {>= "3.17"}
    "odoc" {with-doc}
  ]
  build: [
    ["dune" "subst"] {dev}
    [
      "dune"
      "build"
      "-p"
      name
      "-j"
      jobs
      "@install"
      "@runtest" {with-test}
      "@doc" {with-doc}
    ]
  ]

# Avoiding duplicates

If a `mdx` dependency is already present, do not generate the duplicate one.

  $ cat > dune-project << EOF
  > (lang dune 3.17)
  > (using mdx 0.5)
  > (generate_opam_files)
  > (package
  >  (name n)
  >  (depends (mdx (and :with-test (>= 2))))
  >  (allow_empty))
  > EOF

  $ dune build

  $ cat n.opam
  # This file is generated by dune, edit dune-project instead
  opam-version: "2.0"
  depends: [
    "dune" {>= "3.17"}
    "mdx" {with-test & >= "2"}
    "odoc" {with-doc}
  ]
  build: [
    ["dune" "subst"] {dev}
    [
      "dune"
      "build"
      "-p"
      name
      "-j"
      jobs
      "@install"
      "@runtest" {with-test}
      "@doc" {with-doc}
    ]
  ]

TODO
- mdx should be generated with-test
