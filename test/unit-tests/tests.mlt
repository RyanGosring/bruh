(* -*- tuareg -*- *)

#warnings "-40";;

open Dune
open Import

let () =
  Path.set_root (Path.External.cwd ());
  Path.Build.set_build_dir (Path.Build.Kind.of_string "_build")
;;

let print_pkg ppf pkg =
  Format.fprintf ppf "<package:%s>"
    (Lib_name.to_string (Dune_package.Lib.name pkg))
;;

#install_printer Lib_name.pp_quoted;;
#install_printer print_pkg;;
#install_printer String.Map.pp;;

[%%expect{|
val print_pkg : Format.formatter -> 'a Dune_package.Lib.t -> unit = <fun>
|}]

let findlib =
  let cwd = Path.of_filename_relative_to_initial_cwd (Sys.getcwd ()) in
    Findlib.create
    ~stdlib_dir:cwd
    ~paths:[Path.relative cwd "test/unit-tests/findlib-db"]
    ~version:(Ocaml_version.make (4, 02, 3))
;;

[%%expect{|
val findlib : Findlib.t = <abstr>
|}]

let pkg =
  match Findlib.find findlib (Lib_name.of_string_exn ~loc:None "foo") with
  | Ok x -> x
  | Error _ -> assert false;;

[%%expect{|
val pkg : Sub_system_info.t Dune_package.Lib.t = <package:foo>
|}]

(* "foo" should depend on "baz" *)
Dune_package.Lib.requires pkg |> List.map ~f:snd;;

[%%expect{|
- : Lib_name.t list = ["baz"]
|}]

(* Meta parsing/simplification *)

open Meta
let simplified_pp fmt t = Dyn.pp fmt (Simplified.to_dyn t);;
[%%ignore]
#install_printer simplified_pp;;

let meta =
  Path.in_source "test/unit-tests/findlib-db/foo/META"
  |> Meta.load ~name:(Some (Lib_name.of_string_exn ~loc:None "foo"))

[%%expect{|
val meta : Simplified.t =
  {name = Some "foo";
    vars =
      map {"requires" :
           {set_rules =
              [{var = "requires";
                 predicates = [];
                 action = Set;
                 value = "bar"};
              {var = "requires";
                predicates = [Pos "ppx_driver"];
                action = Set;
                value = "baz"}];
             add_rules = []}};
    subs = []}
|}]

let config_printer fmt d = Dyn.pp fmt (Findlib.Config.to_dyn d);;
[%%ignore]

#install_printer config_printer;;

let conf =
  Findlib.Config.load (Path.in_source "test/unit-tests/toolchain")
    ~toolchain:"tlc" ~context:"<context>"

[%%expect{|
val conf : Findlib.Config.t =
  {vars =
     map {"FOO_BAR" :
          {set_rules =
             [{preds_required = set {6; 7};
                preds_forbidden = set {};
                value = "my variable"}];
            add_rules = []}};
    preds = set {6}}
|}]

let env_pp fmt env = Dyn.pp fmt (Env.to_dyn env);;
#install_printer env_pp;;

[%%expect{|
val env_pp : Format.formatter -> Env.t -> unit = <fun>
|}]

let env = Findlib.Config.env conf

[%%expect{|
val env : Env.t = map {"FOO_BAR" : "my variable"}
|}]
