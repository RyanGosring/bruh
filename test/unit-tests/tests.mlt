(* -*- tuareg -*- *)

#warnings "-40";;

open Jbuilder
open Import

let print_pkg ppf pkg =
  Format.fprintf ppf "<package:%s>" pkg.Findlib.name
;;

#install_printer print_pkg;;

[%%expect{|
val print_pkg : Format.formatter -> Jbuilder.Findlib.package -> unit = <fun>
|}]

let findlib =
  let cwd = Path.absolute (Sys.getcwd ()) in
    Findlib.create
    ~stdlib_dir:cwd
    ~path:[Path.relative cwd "test/unit-tests/findlib-db"]
;;

[%%expect{|
val findlib : Jbuilder.Findlib.t = <abstr>
|}]

let pkg = Findlib.find_exn findlib ~required_by:[] "foo";;

[%%expect{|
val pkg : Jbuilder.Findlib.package = <package:foo>
|}]

(* "foo" should depend on "baz" *)
pkg.requires;;

[%%expect{|
- : Jbuilder.Findlib.package list = [<package:baz>]
|}]

(* +-----------------------------------------------------------------+
   | Meta parsing/simplification                                     |
   +-----------------------------------------------------------------+ *)

open Meta

let meta =
  { name = "foo"
  ; entries = Meta.load "test/unit-tests/findlib-db/foo/META"
  }

[%%expect{|
val meta : Jbuilder.Meta.t =
  {name = "foo";
   entries =
    [Rule {var = "requires"; predicates = []; action = Set; value = "bar"};
     Rule
      {var = "requires"; predicates = [Pos "ppx_driver"]; action = Set;
       value = "baz"}]}
|}]

let conf_vars =
  let conf =
    "test/unit-tests/findlib-db/fl.conf" 
    |> Path.of_string
    |> Findlib.Config.load in
  List.map
    ~f:(fun (predicates, var) -> Findlib.Config.get conf ~predicates ~var)
    [ ["bar"], "foo"
    ; [], "foo"
    ; ["bar"], "baz"
    ; [], "baz"
    ; ["a"], "x"
    ; ["b"], "x"
    ; ["a"; "b"], "x"
    ]

[%%expect{|
val conf_vars : string list =
  ["foo+bar"; "foo"; "baz"; "baz-bar"; "a"; "b"; ""]
|}]
