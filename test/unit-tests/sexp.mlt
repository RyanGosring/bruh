(* -*- tuareg -*- *)
open! Stdune;;
open Galach.Of_sexp;;

let print_loc ppf (_ : Loc.t) = Format.pp_print_string ppf "<loc>";;
#install_printer print_loc;;
[%%expect{|
val print_loc : Format.formatter -> Loc.t -> unit = <fun>
|}]

Printexc.record_backtrace false;;
[%%expect{|
- : unit = ()
|}]

let sexp = lazy (Galach.parse_string ~fname:"" ~mode:Single {|
((foo 1)
 (foo 2))
|});;
Galach.Ast.remove_locs (Lazy.force sexp)
[%%expect{|
val sexp : ast lazy_t = <lazy>
- : Galach.t =
List
 [List [Atom (A "foo"); Atom (A "1")]; List [Atom (A "foo"); Atom (A "2")]]
|}]

let of_sexp = record (field "foo" int)
let x = parse of_sexp Univ_map.empty (Lazy.force sexp)
[%%expect{|
val of_sexp : int t = <abstr>
Exception: Of_sexp (<loc>, "Field \"foo\" is present too many times", None).
|}]

let of_sexp = record (multi_field "foo" int)
let x = parse of_sexp Univ_map.empty (Lazy.force sexp)
[%%expect{|
val of_sexp : int list t = <abstr>
val x : int list = [1; 2]
|}]

type 'res parse_result_diff =
  { jbuild : ('res, string) result
  ; dune   : ('res, string) result
  }

type 'res parse_result =
  | Same of ('res, string) result
  | Different of 'res parse_result_diff

let parse s =
  let f ~lexer =
    try
      Ok (Galach.parse_string ~fname:"" ~mode:Many ~lexer s
          |> List.map ~f:Galach.Ast.remove_locs)
    with
    | Galach.Parse_error e -> Error (Galach.Parse_error.message e)
    | Invalid_argument e -> Error e
  in
  let jbuild = f ~lexer:Galach.Lexer.jbuild_token in
  let dune   = f ~lexer:Galach.Lexer.token        in
  if jbuild <> dune then
    Different { jbuild; dune }
  else
    Same jbuild
[%%expect{|
type 'res parse_result_diff = {
  jbuild : ('res, string) Stdune.result;
  dune : ('res, string) Stdune.result;
}
type 'res parse_result =
    Same of ('res, string) Stdune.result
  | Different of 'res parse_result_diff
val parse : string -> Galach.t list parse_result = <fun>
|}]

parse {| # ## x##y x||y a#b|c#d copy# |}
[%%expect{|
- : Galach.t list parse_result =
Same
 (Ok
   [Atom (A "#"); Atom (A "##"); Atom (A "x##y"); Atom (A "x||y");
    Atom (A "a#b|c#d"); Atom (A "copy#")])
|}]


parse {|x #| comment |# y|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Atom (A "x"); Atom (A "y")];
  dune =
   Ok
    [Atom (A "x"); Atom (A "#|"); Atom (A "comment"); Atom (A "|#");
     Atom (A "y")]}
|}]

parse {|x#|y|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Error "jbuild atoms cannot contain #|";
  dune = Ok [Atom (A "x#|y")]}
|}]

parse {|x|#y|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Error "jbuild atoms cannot contain |#";
  dune = Ok [Atom (A "x|#y")]}
|}]

parse {|"\a"|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Quoted_string "\\a"]; dune = Error "unknown escape sequence"}
|}]

parse {|"\%{x}"|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Quoted_string "\\%{x}"]; dune = Ok [Quoted_string "%{x}"]}
|}]

parse {|"$foo"|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Quoted_string "$foo"])
|}]

parse {|"%foo"|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Quoted_string "%foo"])
|}]

parse {|"bar%foo"|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Quoted_string "bar%foo"])
|}]

parse {|"bar$foo"|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Quoted_string "bar$foo"])
|}]

parse {|"%bar$foo%"|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Quoted_string "%bar$foo%"])
|}]

parse {|"$bar%foo%"|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Quoted_string "$bar%foo%"])
|}]

parse {|\${foo}|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Atom (A "\\${foo}")])
|}]

parse {|\%{foo}|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Atom (A "\\%{foo}")];
  dune =
   Ok
    [Template
      {quoted = false;
       parts =
        [Text "\\";
         Var {loc = <loc>; name = "foo"; payload = None; syntax = Percent}];
       loc = <loc>}]}
|}]

parse {|\$bar%foo%|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Atom (A "\\$bar%foo%")])
|}]

parse {|\$bar\%foo%|}
[%%expect{|
- : Galach.t list parse_result = Same (Ok [Atom (A "\\$bar\\%foo%")])
|}]

parse {|\$bar\%foo%{bar}|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Atom (A "\\$bar\\%foo%{bar}")];
  dune =
   Ok
    [Template
      {quoted = false;
       parts =
        [Text "\\$bar\\%foo";
         Var {loc = <loc>; name = "bar"; payload = None; syntax = Percent}];
       loc = <loc>}]}
|}]

parse {|"bar%{foo}"|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Quoted_string "bar%{foo}"];
  dune =
   Ok
    [Template
      {quoted = true;
       parts =
        [Text "bar";
         Var {loc = <loc>; name = "foo"; payload = None; syntax = Percent}];
       loc = <loc>}]}
|}]

parse {|"bar\%{foo}"|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Quoted_string "bar\\%{foo}"];
  dune = Ok [Quoted_string "bar%{foo}"]}
|}]

parse {|bar%%{foo}|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Atom (A "bar%%{foo}")];
  dune =
   Ok
    [Template
      {quoted = false;
       parts =
        [Text "bar%";
         Var {loc = <loc>; name = "foo"; payload = None; syntax = Percent}];
       loc = <loc>}]}
|}]

parse {|"bar%%{foo}"|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Quoted_string "bar%%{foo}"];
  dune =
   Ok
    [Template
      {quoted = true;
       parts =
        [Text "bar%";
         Var {loc = <loc>; name = "foo"; payload = None; syntax = Percent}];
       loc = <loc>}]}
|}]

parse {|"bar\%foo"|}
[%%expect{|
- : Galach.t list parse_result =
Different
 {jbuild = Ok [Quoted_string "bar\\%foo"];
  dune = Error "unknown escape sequence"}
|}]

(* +-----------------------------------------------------------------+
   | Printing tests                                                  |
   +-----------------------------------------------------------------+ *)

let loc = Loc.none
let a = Galach.atom
let s x = Galach.Quoted_string x
let t  x = Galach.Template { quoted = false; parts = x; loc }
let tq x = Galach.Template { quoted = true ; parts = x; loc }
let l x = Galach.List x
let var ?(syntax=Galach.Template.Percent) ?payload name =
  { Galach.Template.
    loc
  ; name
  ; payload
  ; syntax
  }

type sexp = S of Galach.syntax * Galach.t

let print_sexp ppf (S (syntax, sexp)) = Galach.pp syntax ppf sexp;;
#install_printer print_sexp

type round_trip_result =
  | Round_trip_success
  | Did_not_round_trip of Galach.t
  | Did_not_parse_back of string

let test syntax sexp =
  (S (syntax, sexp),
   let s = Format.asprintf "%a" (Galach.pp syntax) sexp in
   match
     Galach.parse_string s ~mode:Single ~fname:""
       ~lexer:(match syntax with
         | Jbuild -> Galach.Lexer.jbuild_token
         | Dune   -> Galach.Lexer.token)
   with
   | sexp' ->
     let sexp' = Galach.Ast.remove_locs sexp' in
     if sexp = sexp' then
       Round_trip_success
     else
       Did_not_round_trip sexp'
   | exception (Galach.Parse_error e) ->
     Did_not_parse_back (Galach.Parse_error.message e))
;;
#install_printer print_sexp

[%%expect{|
val loc : Loc.t = <loc>
val a : string -> Galach.t = <fun>
val s : string -> Galach.t = <fun>
val t : Galach.Template.part list -> Galach.t = <fun>
val tq : Galach.Template.part list -> Galach.t = <fun>
val l : Galach.t list -> Galach.t = <fun>
val var :
  ?syntax:Galach.Template.var_syntax ->
  ?payload:string -> string -> Galach.Template.var = <fun>
type sexp = S of Galach.syntax * Galach.t
val print_sexp : Format.formatter -> sexp -> unit = <fun>
type round_trip_result =
    Round_trip_success
  | Did_not_round_trip of Galach.t
  | Did_not_parse_back of string
val test : Galach.syntax -> Galach.t -> sexp * round_trip_result = <fun>
|}]

test Dune (a "toto")
[%%expect{|
- : sexp * round_trip_result = (toto, Round_trip_success)
|}]

test Dune (t [Text "x%{"])
[%%expect{|
Exception: Invalid_argument "Invalid text \"x%{\" in unquoted template".
|}]

test Dune (t [Text "x%"; Text "{"])
[%%expect{|
Exception: Invalid_argument "Invalid text \"x%{\" in unquoted template".
|}]

(* This round trip failure is expected *)
test Dune (tq [Text "x%{"])
[%%expect{|
- : sexp * round_trip_result =
("x\%{", Did_not_round_trip (Quoted_string "x%{"))
|}]

test Dune (tq [Text "x%"; Text "{"])
[%%expect{|
- : sexp * round_trip_result =
("x\%{", Did_not_round_trip (Quoted_string "x%{"))
|}]
