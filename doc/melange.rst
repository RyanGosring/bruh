.. _melange_main:

***********************************
JavaScript Compilation With Melange
***********************************

Introduction
------------

`Melange <https://github.com/melange-re/melange>`_ is a compiler from OCaml to
JavaScript. Unlike js_of_ocaml, Melange works by translating OCaml compiler
internal lambda representation to JS files. This allows to produce a single
JavaScript file from each OCaml module. Melange can be installed with
`opam, Esy, or Nix <https://github.com/melange-re/melange#installation>`_
package managers.

Dune can build projects using Melange, and it allows to generate JavaScript
files by defining a :ref:`melange-emit` stanza. Dune libraries can be used
with Melange, by leveraging the ``(modes melange)`` field in the :ref:`library`
stanza.

To enable Melange support in a Dune project, specify the Melange language
version in the :ref:`dune-project` file. Adding

.. code:: scheme

    (using melange 0.1)

to a :ref:`dune-project` file enables using the ``melange.emit`` stanza and the
``(modes melange)`` field for the :ref:`library` stanza.

.. _melange-emit:

melange.emit
------------

The ``melange.emit`` stanza allows to generate JavaScript from Melange libraries and
modules. It's analogous to the OCaml :ref:`executable` stanza, but for Melange
projects:

.. code:: scheme

    (melange.emit
     (target <target>)
     (module_system <module_system>)
     <optional-fields>)

``<target>`` is the name of the folder where resulting JavaScript artifacts will
be placed. In particular, the folder will be
placed under ``_build/default/$path-to-directory-of-melange-emit-stanza``.

The JavaScript artifacts will be placed following the file layout of the source
tree. For example, given the following source tree:

.. code:: bash

    ├── dune # (melange.emit (target output) (libraries lib) (module_system es6))
    ├── app.ml
    └── lib
        ├── dune # (library (name lib) (modes melange))
        └── helper.ml

The resulting layout in ``_build/default`` will be as follows:

.. code:: bash

    output
    ├── melange__App.js
    └── lib
        ├── lib__.js
        ├── lib__Helper.js
        └── lib.js

``<module_system>`` specifies the JavaScript import and export formats used. The
values allowed are ``es6`` and ``commonjs``.

  - ``es6`` will follow `JavaScript modules <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules>`_,
    and will produce imports like ``import * from 'foo'`` and exports like
    ``export let ....``
  - ``commonjs`` will follow `CommonJS modules <https://nodejs.org/api/modules.html>`_,
    and will produce imports like ``require('foo')`` and exports like ``module.exports = ....``

``<optional-fields>`` are:

- ``(entries <modules>)`` specifies what modules will be built with Melange. By
  default, Dune will use all the ``.ml/.re`` files in the same directory as the
  ``dune`` file. This includes ones present in the file system as well
  as ones generated by user rules. You can restrict this list by using a
  ``(entries <modules>)`` field. ``<modules>`` uses the :ref:`ordered-set-language`,
  where elements are module names and don't need to start with an uppercase
  letter. For instance, to exclude module ``Foo``, use ``(entries (:standard \
  foo))``

- ``(libraries <library-dependencies>)`` specifies the library's dependencies.
  Melange libraries can only use the simple form, like
  ``(libraries foo pkg.bar)``. Keep in mind the following limitations:
  - The ``re_export`` and ``select`` forms are not
  supported.

- ``(package <package>)`` allows to define to which JavaScript package the
  artifacts produced by the ``melange.emit`` stanza will belong to. This is
  useful when the ``libraries`` field includes a public library, as it helps
  making  sure the modules from the library and the entry modules that are part
  of the ``melange.emit`` stanza belong to the same resulting JavaScript
  package.

- ``(preprocess <preprocess-spec>)`` specifies how to preprocess files when
  needed. The default is ``no_preprocessing``, and other options are described
  in the :ref:`preprocessing-spec` section.

- ``(preprocessor_deps (<deps-conf list>))`` specifies extra preprocessor
  dependencies preprocessor, i.e., if the preprocessor reads a generated file.
  The specification of dependencies is described in the :ref:`deps-field`
  section.

- ``(flags <flags>)`` specifies compilation flags to be passed to ``melc``, the
  command line tool for the Melange compiler that produces the ``.js`` artifacts.
  ``<flags>`` is specified in the :ref:`ordered-set-language`. It also supports
  ``(:include ...)`` forms. The default value for is taken from the environment,
  as a result it's recommended to write ``(flags ...)`` fields as
  follows: ``(flags (:standard <my options>))``

Limitations
===========

- JavaScript "monorepos" are not supported, so the use case of having multiple
  JavaScript packages produced by Melange in a single project (i.e.
  `Yarn <https://classic.yarnpkg.com/blog/2017/08/02/introducing-workspaces/>`_
  or `npm <https://docs.npmjs.com/cli/v7/using-npm/workspaces>`_ workspaces) is
  not guaranteed to work.

- Libraries that are placed above the directory where the ``melange.emit``
  stanza is located can not be used, due to the file layout requirements
  mentioned above in the ``target`` field description.

- Libraries that are part of the installed world are not supported as
  dependencies in ``melange.emit`` stanzas. Only libraries defined in the
  current scope can be used, either using their real name or the public name.

Simple Project
--------------

Let see how a simple project with Melange and Dune would look like.

First, make sure we have a :ref:`dune-project` file with a Melange lang stanza
present:

.. code:: scheme

  (lang dune 3.6)
  (using melange 0.1)

Next we need a :ref:`dune<dune-files>` file with a :ref:`melange-emit` stanza:

.. code:: scheme

  (melange.emit
   (target output)
   (module_system es6))

Finally, we need some ``.ml`` file:

.. code:: bash

  echo 'Js.log "hello from melange"' > hello.ml

Now we run ``dune build output/melange__Hello.js``. After this is complete, we
get the following files:

.. code::

  .
  ├── _build
  │   └── default
  │       └── melange__Hello.js
  ├── dune
  ├── dune-project
  └── hello.ml

One can then run the ``.js`` target:

.. code:: bash

   $ node _build/default/output/melange__Hello.js
   hello from melange

Faster Builds with ``subdir`` and ``dirs`` Stanzas
--------------------------------------------------

Melange libraries are commonly installed from the ``npm`` package repository,
together with other JavaScript packages. To avoid having Dune inspect
unnecessary folders in ``node_modules``, it is recommended to explicitly
include those folders that are relevant for Melange builds.

This can be accomplished by combining :ref:`subdir` and :ref:`dune-subdirs`
stanzas in a ``dune`` file and by co-locating this file together with the
``node_modules`` folder. The :ref:`dune-vendored_dirs` stanza can be used as
well to avoid warnings in Melange libraries during the application build.

.. code:: scheme

  (subdir
   node_modules
   (vendored_dirs reason-react)
   (dirs reason-react))
