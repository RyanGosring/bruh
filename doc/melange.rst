:orphan:

.. _melange_main:

***********************************
JavaScript Compilation With Melange
***********************************

Introduction
============

`Melange <https://github.com/melange-re/melange>`_ is a compiler from OCaml to
JavaScript. Unlike Js_of_ocaml, Melange works by translating the OCaml
compiler's internal Lambda representation to JS files. This produces a single
JavaScript file for each OCaml module. Melange can be installed with
`opam, Esy, or Nix <https://github.com/melange-re/melange#installation>`_
package managers.

Dune can build projects using Melange, and it allows the user to generate
JavaScript files by defining a :ref:`melange-emit` stanza. Dune libraries can be
used with Melange by leveraging the ``(modes melange)`` field in the
:ref:`library` stanza.

To enable Melange support in a Dune project, specify the Melange language
version in the :ref:`dune-project` file. Adding

.. code:: dune

    (using melange 0.1)

to a :ref:`dune-project` file enables the use of ``melange.emit`` stanzas and
the ``(modes melange)`` field in :ref:`library` stanzas.

.. _melange-emit:

melange.emit
============

The ``melange.emit`` stanza allows the user to generate JavaScript from Melange
libraries and modules. It's similar to the OCaml :ref:`executable` stanza, but
for Melange projects:

.. code:: dune

    (melange.emit
     (target <target>)
     <optional-fields>)

``<target>`` is the name of the folder where resulting JavaScript artifacts will
be placed. In particular, the folder will be placed under
``_build/default/$path-to-directory-of-melange-emit-stanza``.

The result of building a  ``melange.emit`` stanza will match the file structure
of the source tree. For example, given the following source tree:

.. code:: bash

    ├── dune # (melange.emit (target output) (libraries lib))
    ├── app.ml
    └── lib
        ├── dune # (library (name lib) (modes melange))
        └── helper.ml

The resulting layout in ``_build/default/output`` will be as follows:

.. code::

    output
    ├── app.js
    └── lib
        ├── lib.js
        └── helper.js

``<optional-fields>`` are:

- ``(alias <alias-name>)`` specifies an alias to which to attach the targets of
  the ``melange.emit`` stanza.

  - These targets include the ``.js`` files generated by the stanza
    modules, the targets for the ``.js`` files of any library that the stanza
    depends on, and any copying rules for runtime dependencies (see
    ``runtime_deps`` field below).
    
  - By default, all stanzas will have their targets attached to an alias
    ``melange``. The behavior of this default alias is exclusive: if an alias
    is explicitly defined in the stanza, the targets from this stanza will
    be excluded from the ``melange`` alias.

- ``(module_systems <module_systems>)`` specifies the JavaScript import and
  export format used. The values allowed for ``<module_systems>`` are ``es6``
  and ``commonjs``.

  - ``es6`` will follow `JavaScript modules <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules>`_,
    and will produce imports like ``import * from 'foo'`` and exports like
    ``export let ....``

  - ``commonjs`` will follow `CommonJS modules <https://nodejs.org/api/modules.html>`_,
    and will produce imports like ``require('foo')`` and exports like
    ``module.exports = ....``

  - If no extension is defined, the JavaScript files generated will use ``.js``.
    One can specify a different extension by expanding the field, for
    example ``(module_systems (es6 mjs))``.

  - Multiple module systems can be used in the same field, as long as their
    extensions are different, for example
    ``(module_systems commonjs (es6 mjs))`` will produce one set of JavaScript
    files using CommonJS and ``.js`` extension, and another using ES6 and
    ``.mjs`` extension.

- ``(modules <modules>)`` specifies what modules will be built with Melange. By
  default, if this field is not defined, Dune will use all the ``.ml/.re`` files
  in the same directory as the ``dune`` file. This includes module sources
  present in the file system as well as modules generated by user rules. You can
  restrict this list by using an explicit ``(modules <modules>)`` field.
  ``<modules>`` uses the :doc:`reference/ordered-set-language`, where elements
  are module names and don't need to start with an uppercase letter. For
  instance, to exclude module ``Foo``, use ``(modules (:standard \ foo))``.

- ``(libraries <library-dependencies>)`` specifies Melange library dependencies.
  Melange libraries can only use the simple form, like
  ``(libraries foo pkg.bar)``. Keep in mind the following limitations:

  - The ``re_export`` and ``select`` forms are not supported.

  - All the libraries included in ``<library-dependencies>`` have to support
    ``melange`` mode (see the section about libraries below).


- ``(package <package>)`` allows the user to define the JavaScript package to
  which the artifacts produced by the ``melange.emit`` stanza will belong. This
  is useful when the ``libraries`` field includes a public library, as it helps
  making sure that the modules from the ``libraries`` and the ``modules`` fields
  that are part of the ``melange.emit`` stanza belong to the same resulting
  JavaScript package.

- ``(runtime_deps <paths-to-deps>)`` specifies which files should be copied to
  the build folder together with the ``.js`` files generated from the sources.
  These runtime dependencies can include assets like CSS files, images, fonts,
  hand-written JavaScript files, etc. Several dependencies can be defined in the
  same field using any of the available formats in the
  :doc:`concepts/dependency-spec`. For example
  ``(runtime_deps ./path/to/file.css (glob_file_rec ./fonts/*))``.

- ``(emit_stdlib <bool>)`` allows the user to specify whether the Melange
  standard library should be included as a dependency of the stanza or not. The
  default is ``true``.

- ``(promote <options>)`` promotes the generated ``.js`` files to the
  source tree. The options are the same as for the :ref:`rule promote mode <promote>`.
  Adding ``(promote (until-clean))`` to a ``melange.emit`` stanza will cause
  Dune to copy the ``.js`` files to the source tree and use ``dune clean`` to
  delete them.

- ``(preprocess <preprocess-spec>)`` specifies how to preprocess files when
  needed. The default is ``no_preprocessing``, and other options are described
  in the :doc:`reference/preprocessing-spec` section.

- ``(preprocessor_deps (<deps-conf list>))`` specifies extra preprocessor
  dependencies, e.g., if the preprocessor reads a generated file.
  The dependency specification is described in the :doc:`concepts/dependency-spec`
  section.

- ``(compile_flags <flags>)`` specifies compilation flags to be passed to
  ``melc``, the Melange compiler that produces the ``.js`` artifacts.
  ``<flags>`` is described in detail in the
  :doc:`reference/ordered-set-language` section. It also supports
  ``(:include ...)`` forms. The default value for this field is taken from the
  environment therefore it's recommended to write
  ``(compile_flags ...)`` fields as follows:
  ``(compile_flags :standard <my options>)``

- ``(root_module <module>)`` specifies a ``root_module`` that collects all
  listed dependencies in ``libraries``. See the documentation for
  ``root_module`` in the :ref:`library` stanza.

- ``(allow_overlapping_dependencies)`` is the same as the corresponding field of
  :ref:`library`.

Libraries
=========

Melange is compatible with Dune libraries that support it. When adding support
for Melange in libraries, two fields are involved:

- ``(modes melange)``: it is required to add ``melange`` to the library
  ``modes`` field.

  - If the library has no ``modes`` field defined yet, one can use the
    :doc:`reference/ordered-set-language` to do so: ``(modes :standard melange)``

  - If the library already had some value for the ``modes`` field, ``melange``
    mode can be appended to the list of modes, for example:
    ``(modes byte native melange)``

- ``(melange.runtime_deps <deps>)``: optionally, define any runtime dependencies
  using ``melange.runtime_deps``. This field is analog to the ``runtime_deps``
  field used in ``melange.emit`` stanzas. An example:
  ``(melange.runtime_deps ./path/to/file.css (glob_file_rec ./fonts/*))``.

Recommended Practices
=====================

Keep Bundles Small by Reducing the Number of ``melange.emit`` Stanzas
---------------------------------------------------------------------

It is recommended to define a single ``melange.emit`` stanza for each project,
or if that is not possible, at least minimize the number of ``melange.emit``
stanzas defined.

The reason is that using multiple ``melange.emit`` stanzas will lead to multiple
copies of the JavaScript files generated for library code. For example, if
there are two ``melange.emit`` stanzas defined as follows:

.. code:: dune

  (melange.emit
   (target app1)
   (libraries foo))

  (melange.emit
   (target app2)
   (libraries foo))
   
The JavaScript artifacts for library ``foo`` will end up duplicated in the
``_build`` folder, both in ``_build/default/app1`` and ``_build/default/app2``.

This can have unexpected impact on bundle size when using tools like Webpack or
Esbuild, as these tools will not be able to see shared library code as such,
as it would be replicated across the paths of the different stanzas
``target`` folders.


Faster Builds with ``subdir`` and ``dirs`` Stanzas
--------------------------------------------------

Melange libraries might be installed from the ``npm`` package repository,
together with other JavaScript packages. To avoid having Dune inspect
unnecessary folders in ``node_modules``, it is recommended to explicitly
include those folders that are relevant for Melange builds.

This can be accomplished by combining :ref:`subdir` and :ref:`dune-subdirs`
stanzas in a ``dune`` file and by co-locating this file together with the
``node_modules`` folder. The :ref:`dune-vendored_dirs` stanza can be used as
well to avoid warnings in Melange libraries during the application build.

.. code:: dune

  (subdir
   node_modules
   (vendored_dirs reason-react)
   (dirs reason-react))

Simple Project
==============

Let's look at building a simple project with Melange and Dune.

First, make sure that the :ref:`dune-project` file contains a
``(using melange 0.1)`` stanza:

.. code:: dune

  (lang dune 3.8)
  (using melange 0.1)

Next, write a :ref:`dune<dune-files>` file with a :ref:`melange-emit` stanza:

.. code:: dune

  (melange.emit
   (target output))

Finally, add a ``.ml`` source file to build:

.. code:: bash

  echo 'Js.log "hello from melange"' > hello.ml

Now, run ``dune build output/hello.js``. Dune produces the following
structure once it has finished the build:

.. code::

  .
  ├── _build
  │   └── default
  │       └── hello.js
  ├── dune
  ├── dune-project
  └── hello.ml

The resulting ``.js`` target can now be run:

.. code:: bash

   $ node _build/default/output/hello.js
   hello from melange
