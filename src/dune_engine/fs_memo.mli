open! Stdune
open Import

(** All functions in this module raise a code error when given a path in the
    build directory. *)

(* CR-someday amokhov: Note that currently the scheduler call [process_events]
   only for source paths, because we don't watch external directories. We should
   try to implement at least a partial support for watching external paths. *)

(** Check if a source or external path exists and declare a dependency on it. *)
val path_exists : Path.t -> bool Memo.Build.t

(** Call [Path.stat] on a path and declare a dependency on it. *)
val path_stat : Path.t -> (Unix.stats, Unix.error) result Memo.Build.t

(** Digest the contents of a source or external file and declare a dependency on
    it. *)
val file_digest : Path.t -> Digest.t Memo.Build.t

(** List the contents of a source or external directory and declare a dependency
    on it. The result is unsorted and includes both name and kind of each entry. *)
val dir_contents :
  Path.t -> ((string * Unix.file_kind) list, Unix.error) result Memo.Build.t

(** Events generated by the file-watching backend. *)
module Event : sig
  type kind =
    | File_created
    | File_deleted
    | File_changed
    | Directory_created
    | Directory_deleted
    | Unknown  (** Treated conservatively as any possible event. *)

  type t

  val create : kind:kind -> path:Path.t -> t
end

module Rebuild_required : sig
  type t =
    | Yes  (** The file system changed in a way that requires rebuilding. *)
    | No  (** All file system events correspond to untracked paths. *)
end

(** Handle file system events and let the caller know if a rebuild is required. *)
val handle : Event.t Nonempty_list.t -> Rebuild_required.t
